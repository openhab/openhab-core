/*
 * Copyright (c) 2010-2025 Contributors to the openHAB project
 *
 * See the NOTICE file(s) distributed with this work for additional
 * information.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0
 *
 * SPDX-License-Identifier: EPL-2.0
 */
/*
 * generated by Xtext
 */
package org.openhab.core.model.sitemap.formatting

import org.eclipse.xtext.formatting.impl.AbstractDeclarativeFormatter
import org.eclipse.xtext.formatting.impl.FormattingConfig
import com.google.inject.Inject
import org.openhab.core.model.sitemap.services.SitemapGrammarAccess

/**
 * This class contains custom formatting description.
 */
class SitemapFormatter extends AbstractDeclarativeFormatter {

    @Inject extension SitemapGrammarAccess

    override protected void configureFormatting(FormattingConfig c) {
        c.wrappedLineIndentation = 1
        c.autoLinewrap = 120
        
        c.setLinewrap(1, 1, 2).before(widgetRule)

        c.setIndentationIncrement.after("{")
        c.setLinewrap().before("}")
        c.setIndentationDecrement.before("}")
        c.setLinewrap().after("}")

        c.setNoSpace().withinKeywordPairs("<", ">")
        c.setNoSpace().withinKeywordPairs("(", ")")
        c.setNoSpace().withinKeywordPairs("[", "]")

        c.setNoSpace().after("item=", "label=", "icon=", "staticIcon=")
        c.setNoSpace().after("url=", "refresh=", "encoding=", "service=", "period=", "legend=", "forceasitem=", "yAxisDecimalPattern=", "interpolation=", "height=")
        c.setNoSpace().after("minValue=", "maxValue=", "step=", "inputHint=", "row=", "column=", "click=", "release=")
        c.setNoSpace().after("labelcolor=", "valuecolor=", "iconcolor=", "visibility=", "mappings=", "buttons=")

        c.setNoSpace().before(",")
        c.setNoSpace().around(":", "=")

        c.setLinewrap(0, 1, 2).before(SL_COMMENTRule)
        c.setLinewrap(0, 1, 2).before(ML_COMMENTRule)
        c.setLinewrap(0, 1, 1).after(ML_COMMENTRule)
	}

    def withinKeywordPairs(FormattingConfig.NoSpaceLocator locator, String leftKW, String rightKW) {
        for (pair : findKeywordPairs(leftKW, rightKW)) {
            locator.after(pair.first)
            locator.before(pair.second)
        }
    }

    def around(FormattingConfig.ElementLocator locator, String ... listKW) {
        for (keyword : findKeywords(listKW)) {
            locator.around(keyword)
        }
    }

    def after(FormattingConfig.ElementLocator locator, String ... listKW) {
        for (keyword : findKeywords(listKW)) {
            locator.after(keyword)
        }
    }

    def before(FormattingConfig.ElementLocator locator, String ... listKW) {
        for (keyword : findKeywords(listKW)) {
            locator.before(keyword)
        }
    }
}
